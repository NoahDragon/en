<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[An Online Hacker Game]]></title>
      <url>http://en.abnerchou.me/Blog/e4c9ee8f/</url>
      <content type="html"><![CDATA[<p>You could start the game from <a href="http://fun.coolshell.cn" target="_blank" rel="external">here</a>, hosted by <a href="http://coolshell.cn" target="_blank" rel="external">coolshell.cn</a>.</p><p>Don’t hesitate to use google and wikipedia to solve the puzzles.</p><p>I have posted hints and solutions on <a href="https://github.com/NoahDragon/fun.coolshell.cn" target="_blank" rel="external">my github</a>, use them wisely when you get difficulties.</p><p>Enjoy :)</p><p><img src="/images/pics/online_hacker_game.PNG" alt="Rank 49"></p><p>A little bit show off and keep a record.</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Set up VPN with transparent proxy on DigitalOcean]]></title>
      <url>http://en.abnerchou.me/Blog/2b608f65/</url>
      <content type="html"><![CDATA[<p>Recently I just rent a VPS on <a href="https://www.digitalocean.com" target="_blank" rel="external">Digital Ocean</a>,<br>which is cheap for a student and who is price sensitive.<br>As it gives you all the controls of an OS, it likes a remote compute machine.<br>Meanwhile, you could do anything as you have your own server.</p><a id="more"></a><p>Therefore, it comes to my mind to create a VPN server.<br>VPN is a virtual private network that extends a private network across a public network,<br>which usually used to bypass firewalls or increase access speed.<br>Proxy is a server that acts as an intermediary for requests from clients seeking resources from other servers.<br>It needs to be set in software application’s configuration.<br>VPN and Proxy both could hide your ip.<br>The differences between them are listed following:</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">VPN</th><th style="text-align:center">Proxy</th></tr></thead><tbody><tr><td style="text-align:left">Protocols&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td style="text-align:center">Support any Protocols</td><td style="text-align:center">Support certain Protocols, such as HTTP, SOCKS</td></tr><tr><td style="text-align:left">Softwares</td><td style="text-align:center">Any softwares that can run on the machine &nbsp;&nbsp;&nbsp;&nbsp;</td><td style="text-align:center">Softwares support proxy configuration</td></tr><tr><td style="text-align:left">Price</td><td style="text-align:center">High if you rent from vpn provider</td><td style="text-align:center">Low</td></tr><tr><td style="text-align:left">Speed</td><td style="text-align:center">Varies depend on number of users<br>usually depends on servers</td><td style="text-align:center">Depend on servers</td></tr><tr><td style="text-align:left">Security</td><td style="text-align:center">Encryption (128-bit to 2048-bit)</td><td style="text-align:center">Not encrypted</td></tr></tbody></table><p><br></p><p>Because of the encryption, every accesses through VPN retrive the objects directly from the source.<br>This could slow down the user experience when hits a same object multiple times, such as icons in a webpage.<br>If there is a way that could cache web objects into VPN server, that will significantly increase the access speed, which get objects from local disk instead of downloading from source website.<br>Here, I should introduce the transparent proxy, which usually sets on the gateway and caches content from WWW requests.<br>It calls transparent because client side does not need any configuration.<br>Hence, every WWW requests through VPN need go to transparent proxy.</p><p>This installation guide is tested on Ubuntu 14.04 64bit.<br>VPN is set up by <a href="http://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol" target="_blank" rel="external">pptp</a>.<br>Transparent proxy is on <a href="http://www.squid-cache.org" target="_blank" rel="external">Squid3</a>.</p><ul><li><strong>pptp installation</strong></li></ul><p>In terminal, type the command bellow to install pptp server:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure><p></p><p>To restrict user access your VPN server, you also need to add users and passwords in <code>/etc/ppp/chap-secets</code>.<br>In the client column is user’s name, the secret column is for passwords.<br>I masked mine for privacy.</p><p><img src="/images/pics/user_password.jpg" alt="Set user and password"></p><p>Add the following DNS to <code>/etc/ppp/pptpd-options</code>:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ms-dns 8.8.8.8</span><br><span class="line">ms-dns 8.8.4.4</span><br></pre></td></tr></table></figure><p></p><p>Restart pptp server by command <code>service pptpd restart</code>. Check if it is running by <code>netstat -alpn | grep :1723</code>.</p><p>You also should enable the IP forwarding on your pptp server.<br>This would transfer the package between public ip and private ips on your server.<br>Open <code>/etc/sysctl.conf</code>, add the following line if not exist: <code>net.ipv4.ip_forward = 1</code>.<br>Then run <code>sysctl -p</code> to make the change effective.</p><p>Create NAT rule for iptables, and your VPN is ready to use:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables --table nat --append POSTROUTING -o eth0 -j MASQUERADE &amp;&amp; iptables-save</span><br></pre></td></tr></table></figure><p></p><ul><li><strong>Squid3 installation</strong></li></ul><p>Similar to pptpd, typing the following in terminal:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install squid</span><br><span class="line">update-rc.d squid3 defaults</span><br></pre></td></tr></table></figure><p></p><p>The proxy is usable now, but it is the normal proxy with default settings.<br>To change it to transparent proxy, we need to edit the <code>/etc/squid3/squid.conf</code> file.<br>The squid.conf follows the rules of allow/deny order.<br>It obeys the first come first serve, the first matched rule will apply.<br>For example, if you put “deny all” at the first line of squid.conf, then the proxy denies all request.<br>If a rule does not indicate in squid.conf, then it defaults as deny.</p><p>First, find the line <code>http_port 3128</code>, change it to <code>http_port 3128 transparent</code>.<br><strong>this is important</strong></p><p>Second, add the following rules:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acl myhost src 192.168.0.1</span><br><span class="line">http_access allow myhost</span><br><span class="line">acl mymachine src 10.0.0.0/16</span><br><span class="line">http_access allow mymachine</span><br></pre></td></tr></table></figure><p></p><p>The ‘192.168.0.1’ is my public ip, and the ‘10.0.0.0/16’ is my private ips.<br>Restart squid <code>sudo service squid3 restart</code>.</p><p>Finally, we set the iptables to redirect all the traffic through 80 port to 3128 port that is our transparent proxy.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -i ppp0 -p tcp -m tcp --dport 80 -j REDIRECT --to-port 3128</span><br></pre></td></tr></table></figure><p></p><p>The transparent proxy is set up.</p><ul><li><strong>Restore iptables rules while system start up</strong></li></ul><p>Right now, you couldn’t restart the system, otherwise the iptables will be set to empty again.<br>But you can input the previous iptables commands again to solve this.</p><p>Here I introduce a method that will do it once and for all.</p><p>Save iptables into <code>/etc/network/iptables.rules</code> by <code>iptables-save &gt; /etc/network/iptables.rules</code></p><p>Open <code>/etc/rc.local</code> and add the following line before “exit 0”:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables-restore &lt; /etc/network/iptables.rules</span><br></pre></td></tr></table></figure><p></p><p>Then our saved iptables rules will be loaded every time the system start up.</p><p>Enjoy your VPN server with transparent proxy!</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Why Sun is the center of our solar system]]></title>
      <url>http://en.abnerchou.me/Blog/e0efd72f/</url>
      <content type="html"><![CDATA[<p>Because our Earth is in a system called Solar System.<br>I don’t think the answer would be simple as that.<br>Why the Earth could not be the center?</p><p>Actually it could.<br>As we learn in physic, all motions are relative, like we feel we are still on the Earth, but we actually spin and orbit the Sun.<br>Moreover, we orbit the Sun, in another words that the Sun also orbits us.<br>This doesn’t conflict with motion relative law.<br>But why we are not saying the Sun is orbiting Earth?<br><a id="more"></a><br>So let’s see how the planets move during heliocentric system and geocentric system.<br>Here is the link: <a href="http://noahdragon.github.io/SolarSystem.js/" target="_blank" rel="external">SolarSystem.js</a>.<br>You could click to switch the systems, and draw the orbit path for better viewing.</p><p>The heliocentric system shows perfect concentric circles of planets path, in contrast, the geocentric system looks like random motion.<br>Untile we draw their path, only the Sun’s orbit is circle, the other planet tracks are like spiral.<br>After long enough years, the orbit will look like below picture:</p><p><img src="/images/pics/geocentric.jpg" alt="Geocentric system orbits"></p><p>It’s totally mess!</p><p>This simulated program assumes the planets’ orbit is circle and in the same surface.<br>In our real solar system, it is way more complicate.</p><p>I didn’t do the history research about why heliocentrism won the theory battle.<br>But I know heliocentrism is better because it is simpler.<br>This also aligns with the philosophy of Unix/Linux programming:<br>K.I.S.S., which stands for “Keep It Simple &amp; Straightforward”.</p><p>Because of heliocentric system, we make satellite launch possible, and easily calculate the planets position.<br>Otherwise, I couldn’t image how hard the job is for a mathematician to compute the correct route from the Earth to Mars.</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[My First Blog Here]]></title>
      <url>http://en.abnerchou.me/Blog/90d363bc/</url>
      <content type="html"><![CDATA[<p>Well, this is my first blog here (right now on github).</p><p>I’m using the <a href="http://octopress.org" target="_blank" rel="external">Octopress</a> as blog content management,<br>and I will briefly describe the way to set it up.</p><a id="more"></a><p>First, go to Octopress <a href="http://octopress.org/docs/setup/" target="_blank" rel="external">setup page</a>.<br>Follow the instruction,<br>install the dependencies that Octopress will need.</p><p>Then choose the platform that the blog will be hosted on,<br>here is a link for <a href="http://octopress.org/docs/deploying/github/" target="_blank" rel="external">deploying github pages</a>.<br><strong>Note</strong>: an error occured while I followed the instruction to rake it.<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rake aborted!</span><br><span class="line">You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.6.</span><br><span class="line">Prepending `bundle <span class="built_in">exec</span>` to your <span class="built_in">command</span> may solve this.</span><br><span class="line">/Users/Haochen/myB<span class="built_in">log</span>/octopress/Rakefile:2:<span class="keyword">in</span> `&lt;top (required)&gt;<span class="string">'</span><br><span class="line">(See full trace by running task with --trace)</span></span><br></pre></td></tr></table></figure><p></p><p>This error could be easily solved by adding <code>bundle exec</code> in front of the <code>rake</code> command.</p><p>After <code>rake generate</code>, go to ‘_deploy’ folder, and type <code>git pull origin master</code>.<br>Then type <code>rake deploy</code>.<br>Otherwise, there will be some errors:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: failed to push some refs to <span class="string">'git@gihub.com:your github page repo'</span></span><br></pre></td></tr></table></figure><p></p><p>Now, your blog page is on-line.<br>Although the pages are hosted on github,<br>you still need version control on your Octopress settings,<br>so don’t forget to commit to the ‘source’ branch.<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'your message'</span></span><br><span class="line">git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p></p><p>(I’d rather put them into a bash file than typing every time)<br></p><figure class="highlight bash"><figcaption><span>git_commit_source.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">git add . &amp;&amp;</span><br><span class="line">git commit -m <span class="string">"<span class="variable">$1</span>"</span> &amp;&amp; <span class="comment">#first argument will be the commit message</span></span><br><span class="line">git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p></p><p>To generate a blog page, you could use</p><figure class="highlight plain"><figcaption><span>new_post['blog name'] ```.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">However, as I mentioned before the ```rake``` command wouldn&apos;t work properly if the ruby version didn&apos;t match.</span><br><span class="line">We could use ``` bundle exec rake ``` to run the command.</span><br><span class="line">Moreover, if you are using **zsh shell**, you should also add ``` noglob ``` in front of these command, because symbol &apos;[&apos; and &apos;]&apos; are reserved in zsh for regular expression.</span><br><span class="line"></span><br><span class="line">Finally, my blog is here.</span><br><span class="line">Much easier than I expected.</span><br><span class="line">Using Octopress can save your time on setting a blog site, and it generates pages automatically.</span><br><span class="line"></span><br><span class="line">This blog is still underconstruction. I would like to make it more simple and pretty.</span><br><span class="line">K.I.S.S</span><br><span class="line"></span><br><span class="line">**Update** (several minutes later):</span><br><span class="line">Encountered a problem of creating single page, e.g. 404.html.</span><br><span class="line">The command `rake new-page[&apos;404&apos;]` cannot work on zsh due to &apos;[]&apos; is converted.</span><br><span class="line">Hence, the only way to add cutomize page is to write a markdown file and put into &apos;source&apos; fold.</span><br><span class="line">But, do not forget to add the following to the head of page:</span><br><span class="line">``` bash</span><br><span class="line">---</span><br><span class="line">layout: page</span><br><span class="line">title: &quot;Super Awesome&quot;</span><br><span class="line">date: 2011-07-03 5:59</span><br><span class="line">comments: true</span><br><span class="line">sharing: true</span><br><span class="line">footer: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p></p><p><strong>Update</strong> (2014-Mar-12):<br><code>rake preview</code> has problem with Safari.<br>Don’t know why but only show blank page while open <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> .<br>Using Chrome or Firefox will solve this.[<a href="https://github.com/imathis/octopress/issues/1395" target="_blank" rel="external">ref</a>]</p><p>Due to save typing, I have written some bash files:<br></p><figure class="highlight bash"><figcaption><span>deploy.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">bundle <span class="built_in">exec</span> rake generate &amp;&amp;</span><br><span class="line">bundle <span class="built_in">exec</span> rake deploy</span><br></pre></td></tr></table></figure><p></p><figure class="highlight bash"><figcaption><span>preview.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># set up the octopress preview</span></span><br><span class="line"><span class="comment"># open http://localhost:4000 in Chrome</span></span><br><span class="line"><span class="comment"># Safari has some wired error in it</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if previous preview is running, stop it</span></span><br><span class="line">preview_pid=`/bin/ps -fu <span class="variable">$USER</span>| grep <span class="string">"rake\ preview"</span> | grep -v <span class="string">"grep"</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="built_in">kill</span> -2 <span class="variable">$preview_pid</span></span><br><span class="line"></span><br><span class="line">bundle <span class="built_in">exec</span> rake generate &amp;&amp;</span><br><span class="line">bundle <span class="built_in">exec</span> rake preview &amp;</span><br><span class="line"></span><br><span class="line">sleep 5 <span class="comment"># wait a while to make sure the preview already running</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#change the browser command if you are using a different OS and browser</span></span><br><span class="line">/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome <span class="string">'http://localhost:4000'</span></span><br><span class="line"></span><br><span class="line">pidof <span class="string">"Google Chrome"</span> | xargs <span class="built_in">wait</span></span><br><span class="line">preview_pid=`/bin/ps -fu <span class="variable">$USER</span>| grep <span class="string">"rake\ preview"</span> | grep -v <span class="string">"grep"</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="built_in">kill</span> -2 <span class="variable">$preview_pid</span></span><br><span class="line"><span class="comment">#echo "$preview_pid"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Preview DONE!"</span></span><br></pre></td></tr></table></figure><p>Please ignore the text below, the latest code fixes all of them. :P</p><p><del><strong>Warnning</strong>:<br>This preview shell script may not work for you if you are a ruby developer,<br>or you are using some programs written or depended in/on ruby or ruby packages,<br>because it killed all ruby processes at the end.<br>Do not forget to fully quit Chrome (Comman+q in MacOS) before starting a new preview,<br>otherwise unknown error would occur (duplicate processes).</del></p><p><del>BTW, the preview.sh also left a messy terminal for you.<br>Well, everything have side effects.<br>But you could add <code>clear</code> command at the end of the script,<br>if you don’t really care about the traces.</del></p>]]></content>
    </entry>
    
  
  
</search>
